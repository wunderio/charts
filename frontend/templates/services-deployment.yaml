{{- range $serviceName, $service := .Values.services }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-{{ $serviceName }}
  labels:
    {{- include "frontend.release_labels" $ | nindent 4 }}
    silta-frontend: service
spec:
  {{- if or (not $service.autoscaling) (not (($service.autoscaling).enabled)) }}
  replicas: {{ default 1 $service.replicas }}
  {{- end }}
  strategy:
    {{ default $.Values.serviceDefaults.strategy $service.strategy | toYaml }}
  selector:
    matchLabels:
      {{- include "frontend.release_selector_labels" $ | nindent 6 }}
      deployment: frontend-{{ $serviceName }}
  template:
    metadata:
      labels:
        {{- include "frontend.release_labels" $ | nindent 8 }}
        deployment: frontend-{{ $serviceName }}
        silta-frontend: service
        {{- if $.Values.shell.enabled }}
        silta-ingress: allow
        {{- end }}
      annotations:
        # We use a checksum to redeploy the pods when the configMap changes.
        configMap-checksum: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
    spec:
      {{- if $service.podSecurityContext }}
      securityContext:
        {{- toYaml $service.podSecurityContext | nindent 8 }}
      {{- end }}
      enableServiceLinks: false
      containers:
      - name: {{ $serviceName }}
        image: {{ $service.image | quote }}
        {{- if $service.containerSecurityContext }}
        securityContext:
          {{- toYaml $service.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ default $.Values.serviceDefaults.port $service.port }}
          name: {{ $serviceName }}
        volumeMounts:
          {{- if $service.mounts }}
          {{- range $index, $mountName := $service.mounts }}
          {{- $mount := (index $.Values.mounts $mountName) }}
          {{- if eq $mount.enabled true }}
          - name: frontend-{{ $mountName }}
            mountPath: {{ $mount.mountPath }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if $.Values.shell.enabled }}
          - name: shell-keys
            mountPath: /etc/ssh/keys
          {{- end }}
        lifecycle:
        {{- if $service.lifecycle }}
          {{ toYaml $service.lifecycle | nindent 10 }}
        {{- else }}
          {{ toYaml $.Values.serviceDefaults.lifecycle | nindent 10 }}
        {{- end }}
        livenessProbe:
        {{- if $service.livenessProbe }}
        {{- toYaml $service.livenessProbe | nindent 10 }}
        {{- else }}
          tcpSocket:
            port: {{ default $.Values.serviceDefaults.port $service.port }}
        {{- end }}
        readinessProbe:
        {{- if $service.readinessProbe }}
        {{- toYaml $service.readinessProbe | nindent 10 }}
        {{- else }}
          tcpSocket:
            port: {{ default $.Values.serviceDefaults.port $service.port }}
        {{- end }}
        env:
        {{- include "services.env" (dict "Values" $.Values "Release" $.Release "service" $service) | nindent 8 }}
        {{- range $key, $val := $service.env }}
        - name: {{ $key }}
        {{- if or (kindIs "string" $val) (kindIs "int" $val) (kindIs "float64" $val) (kindIs "bool" $val) (kindIs "invalid" $val) }}
          value: {{ $val | quote }}
        {{- else }}
          {{ $val | toYaml | indent 12 | trim }}
        {{- end }}
        {{- end }}
        resources:
          {{- if $service.resources }}
          {{ merge $service.resources $.Values.serviceDefaults.resources | toYaml | nindent 10 }}
          {{- else }}
          {{- $.Values.serviceDefaults.resources | toYaml | nindent 10 }}
          {{- end }}
      serviceAccountName: {{ include "frontend.serviceAccountName" $ }}
      volumes:
        {{ if $service.mounts }}
        {{- range $index, $mountName := $service.mounts }}
        {{ $mount := (index $.Values.mounts $mountName) }}
        {{- if eq $mount.enabled true }}
        - name: frontend-{{ $mountName }}
        {{- if hasKey $mount "secretName" }}
          secret:
            secretName: {{ $mount.secretName }}
        {{- else if hasKey $mount "configMapName" }}
          configMap:
            name: {{ $mount.configMapName }}
        {{- else }}
          persistentVolumeClaim:
            {{- if and ( eq $mount.storageClassName "silta-shared" ) ( eq ( include "silta-cluster.rclone.has-provisioner" $ ) "true" ) }}
            claimName: {{ $.Release.Name }}-{{ $mountName }}2
            {{- else }}
            claimName: {{ $.Release.Name }}-{{ $mountName }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if $.Values.shell.enabled }}
        - name: shell-keys
          persistentVolumeClaim:
            {{- if and ( eq $.Values.shell.mount.storageClassName "silta-shared" ) ( eq ( include "silta-cluster.rclone.has-provisioner" $ ) "true" ) }}
            claimName: {{ $.Release.Name }}-shell-keys2
            {{- else }}
            claimName: {{ $.Release.Name }}-shell-keys
            {{- end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ default $.Values.serviceDefaults.terminationGracePeriodSeconds $service.terminationGracePeriodSeconds }}
      {{- $nodeSelector := default $.Values.serviceDefaults.nodeSelector $service.nodeSelector }}
      {{- if $nodeSelector }}
      nodeSelector:
        {{- $nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- if or $nodeSelector $service.tolerations $.Values.serviceDefaults.tolerations  }}
      tolerations:
        {{- include "frontend.tolerations" $nodeSelector | nindent 8 }}
        {{- if $service.tolerations }}
        {{- toYaml $service.tolerations | nindent 8 }}
        {{- else if $.Values.serviceDefaults.tolerations }}
        {{- toYaml $.Values.serviceDefaults.tolerations | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if or $service.affinity $.Values.serviceDefaults.affinity }}
      affinity:
        {{- if $service.affinity }}
        {{- tpl ( $service.affinity | toYaml ) (dict "Values" $.Values "Release" $.Release "serviceLabel" (printf "frontend-%s" $serviceName)) | nindent 8 }}
        {{- else if $.Values.serviceDefaults.affinity }}
        {{- tpl ( $.Values.serviceDefaults.affinity | toYaml ) (dict "Values" $.Values "Release" $.Release "serviceLabel" (printf "frontend-%s" $serviceName)) | nindent 8 }}
        {{- end }}
      {{- end }}
{{- if or $service.postupgrade $service.postinstall }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Release.Name }}-{{ $serviceName }}-post-release"
  labels:
    {{- include "frontend.release_labels" $ | nindent 4 }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  completions: 1
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "frontend.release_labels" $ | nindent 8 }}
    spec:
      restartPolicy: Never
      enableServiceLinks: false
      containers:
      - name: {{ $serviceName }}
        image: {{ $service.image | quote }}
        command: ["/bin/bash", "-c"]
        args:
        - |
            {{- if $.Release.IsInstall }}
            {{- if ($service.postinstall).command }}
            {{- $service.postinstall.command | nindent 10 }}
            {{- end }}
            {{- end }}
            {{- if ($service.postupgrade).command }}
            {{- $service.postupgrade.command | nindent 10 }}
            {{- end }}
        volumeMounts:
          {{ if $service.mounts }}
          {{- range $serviceName, $mountName := $service.mounts }}
          {{ $mount := (index $.Values.mounts $mountName) }}
          {{- if eq $mount.enabled true }}
          - name: frontend-{{ $mountName }}
            mountPath: {{ $mount.mountPath }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if $.Values.shell.enabled }}
          - name: shell-keys
            mountPath: /etc/ssh/keys
          {{- end }}
        env:
        {{- include "services.env" (dict "Values" $.Values "Release" $.Release "service" $service) | nindent 8 }}
        {{- range $key, $val := $service.env }}
        - name: {{ $key }}
        {{- if or (kindIs "string" $val) (kindIs "int" $val) (kindIs "float64" $val) (kindIs "bool" $val) (kindIs "invalid" $val) }}
          value: {{ $val | quote }}
        {{- else }}
          {{ $val | toYaml | indent 4 | trim }}
        {{- end }}
        {{- end }}
      volumes:
        {{ if $service.mounts }}
        {{- range $serviceName, $mountName := $service.mounts }}
        {{- $mount := (index $.Values.mounts $mountName) }}
        {{- if eq $mount.enabled true }}
        - name: frontend-{{ $mountName }}
        {{- if hasKey $mount "secretName" }}
          secret:
            secretName: {{ $mount.secretName }}
        {{- else if hasKey $mount "configMapName" }}
          configMap:
            name: {{ $mount.configMapName }}
        {{- else }}
          persistentVolumeClaim:
            {{- if and ( eq $mount.storageClassName "silta-shared" ) ( eq ( include "silta-cluster.rclone.has-provisioner" $ ) "true" ) }}
            claimName: {{ $.Release.Name }}-{{ $mountName }}2
            {{- else }}
            claimName: {{ $.Release.Name }}-{{ $mountName }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if $.Values.shell.enabled }}
        - name: shell-keys
          persistentVolumeClaim:
            {{- if and ( eq $.Values.shell.mount.storageClassName "silta-shared" ) ( eq ( include "silta-cluster.rclone.has-provisioner" $ ) "true" ) }}
            claimName: {{ $.Release.Name }}-shell-keys2
            {{- else }}
            claimName: {{ $.Release.Name }}-shell-keys
            {{- end }}
        {{- end }}
{{- end }}

{{- if $service.autoscaling }}
{{- if $service.autoscaling.enabled }}
---
apiVersion: {{ include "frontend.autoscaling.api-version" $ | trim }}
kind: HorizontalPodAutoscaler
metadata:
  name: {{ $.Release.Name }}-{{ $serviceName }}
  labels:
    {{- include "frontend.release_labels" $ | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $.Release.Name }}-{{ $serviceName }}
  minReplicas: {{ default $.Values.serviceDefaults.autoscaling.minReplicas $service.autoscaling.minReplicas }}
  maxReplicas: {{ default $.Values.serviceDefaults.autoscaling.maxReplicas $service.autoscaling.maxReplicas }}
  metrics:
  {{- $metrics := $.Values.serviceDefaults.autoscaling.metrics }}
  {{- if $service.autoscaling.metrics }}
  {{- $metrics = $service.autoscaling.metrics }}
  {{- end }}
  {{- if eq ( include "frontend.autoscaling.api-version" $ | trim ) "autoscaling/v2beta1" }}
  {{- range $metrics }}
  - type: Resource
    resource:
      name: {{ .resource.name }}
      {{- if .resource.targetAverageUtilization }}
      targetAverageUtilization: {{ .resource.targetAverageUtilization }}
      {{- end }}
  {{- end }}
  {{- end }}
  {{- if eq ( include "frontend.autoscaling.api-version" $ | trim ) "autoscaling/v2" }}
  {{- range $metrics }}
  - type: Resource
    resource:
      name: {{ .resource.name }}
      {{- if .resource.targetAverageUtilization }}
      target:
        type: Utilization
        averageUtilization: {{ .resource.targetAverageUtilization }}
      {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}
---
{{- end }}
