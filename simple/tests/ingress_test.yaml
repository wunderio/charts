suite: Site ingress
templates:
  - configmap.yaml
  - ingress.yaml
  - checks.yaml
tests:
  - it: is a ingress
    template: ingress.yaml
    asserts:
      - isKind:
          of: Ingress

  - it: uses traefik ingress class (1.17)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 17
    asserts:
      - equal:
          path: metadata.annotations['kubernetes.io/ingress.class']
          value: 'traefik'

  - it: uses traefik ingress class (1.18+)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 18
    asserts:
      - equal:
          path: 'spec.ingressClassName'
          value: 'traefik'

  - it: sets correct hostname for deployment
    template: ingress.yaml
    set:
      environmentName: 'foo'
      projectName: 'bar'
      clusterDomain: 'baz'
    asserts:
      - equal:
          path: spec.rules[0].host
          value: 'foo.bar.baz'

  - it: sets correct hostname for deployment when projectName is absent
    template: ingress.yaml
    set:
      environmentName: 'foo'
      clusterDomain: 'baz'
    asserts:
      - equal:
          path: spec.rules[0].host
          value: 'foo.namespace.baz'

  - it: directs traefik requests to simple service by default (cm 0.8)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 17
      apiVersions:
        - certmanager.k8s.io/v1alpha1
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.serviceName
          value: 'RELEASE-NAME-simple'

  - it: directs traefik requests to simple service by default (cm 1.4+)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 18
      apiVersions:
        - cert-manager.io/v1
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: 'RELEASE-NAME-simple'

  - it: uses correct ingress api version (1.17)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 17
    asserts:
      - equal:
          path: apiVersion
          value: 'networking.k8s.io/v1beta1'

  - it: uses correct ingress api version (1.18+)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 18
    asserts:
      - equal:
          path: apiVersion
          value: 'networking.k8s.io/v1'

  - it: shortens long project names
    template: ingress.yaml
    set:
      projectName: 'client-fi-longclient-longproject-backend'
    asserts:
      - equal:
          path: spec.rules[0].host
          value: 'release-name.client-fi-longclient-longpra6b.silta.wdr.io'

  - it: shortens long branch names
    template: ingress.yaml
    set:
      environmentName: 'feature/my-project-shortname-12345-with-additional-description'
    asserts:
      - equal:
          path: spec.rules[0].host
          value: 'feature-my-project-shortname-12345-witdb6.namespace.silta.wdr.io'

  - it: shortens branch names more when project name is already long
    template: ingress.yaml
    set:
      projectName: 'client-fi-longclient-longproject-backend'
      environmentName: 'feature/my-project-shortname-12345-with-additional-description'
    asserts:
      - equal:
          path: spec.rules[0].host
          value: 'feature-my-projecdb6.client-fi-longclient-longpra6b.silta.wdr.io'

  - it: exposeDomains - uses default ingress type and has correct hostname (1.17)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 17
    set:
      ingress:
        default:
          type: foo
      exposeDomains:
        bar:
          hostname: bar.baz
    asserts:
      - documentIndex: 1
        equal:
          path: metadata.annotations['kubernetes.io/ingress.class']
          value: 'foo'

  - it: exposeDomains - uses default ingress type and has correct hostname (1.18+)
    template: ingress.yaml
    capabilities:
      majorVersion: 1
      minorVersion: 18
    set:
      ingress:
        default:
          type: foo
      exposeDomains:
        bar:
          hostname: bar.baz
    asserts:
      - documentIndex: 1
        equal:
          path: 'spec.ingressClassName'
          value: 'foo'

  - it: exposeDomains - has correct hostname
    template: ingress.yaml
    set:
      exposeDomains:
        bar:
          hostname: foo.bar
    asserts:
      - documentIndex: 1
        equal:
          path: spec.rules[0].host
          value: 'foo.bar'

  - it: exposeDomains - ssl redirect is enabled by default
    template: ingress.yaml
    set:
      exposeDomains:
        foo:
          hostname: foo.bar
    asserts:
      - documentIndex: 1
        equal:
          path: metadata.annotations['ingress.kubernetes.io/ssl-redirect']
          value: 'true'

  - it: exposeDomains - can disable ssl for a certain ingress
    template: ingress.yaml
    set:
      ingress:
        nossl:
          tls: false
          redirect-https: false
      exposeDomains:
        foo:
          hostname: foo.bar
          ingress: nossl
    asserts:
      - documentIndex: 1
        equal:
          path: metadata.annotations['traefik.ingress.kubernetes.io/frontend-entry-points']
          value: 'http'
      - documentIndex: 1
        notExists:
          path: ingress.kubernetes.io/ssl-redirect

  - it: exposeDomains - can disable ssl redirect
    template: ingress.yaml
    set:
      ingress:
        nossl:
          redirect-https: false
      exposeDomains:
        foo:
          hostname: foo.bar
          ingress: nossl
    asserts:
      - documentIndex: 1
        notExists:
          path: metadata.annotations['ingress.kubernetes.io/ssl-redirect']

  - it: exposeDomains - multiple hostnames can use the same ingress
    template: ingress.yaml
    set:
      exposeDomains:
        foo:
          hostname: foo.baz
        bar:
          hostname: bar.baz
    asserts:
      - documentIndex: 1
        equal:
          path: 'spec.rules[1].host'
          value: 'foo.baz'
      - documentIndex: 1
        equal:
          path: 'spec.rules[0].host'
          value: 'bar.baz'

  - it: exposeDomains - can supply staticIpAddressName for gce type ingress
    template: ingress.yaml
    set:
      exposeDomains:
        bar:
          hostname: foo.bar
          ingress: gce
      ingress:
        gce:
          staticIpAddressName: baz
    asserts:
      - documentIndex: 1
        equal:
          path: metadata.annotations['kubernetes.io/ingress.global-static-ip-name']
          value: 'baz'

  - it: tests realipfrom nginx configuration (legacy string value)
    template: configmap.yaml
    set:
      nginx:
        realipfrom: '1.2.3.4'
    asserts:
    - matchRegex:
        path: data.nginx_conf
        pattern: 'set_real_ip_from *1.2.3.4'

  - it: tests realipfrom nginx configuration (multivalue object)
    template: configmap.yaml
    set:
      nginx:
        realipfrom:
          foo: '1.1.1.1'
          bar: '2.2.2.2'
    asserts:
    - matchRegex:
        path: data.nginx_conf
        pattern: 'set_real_ip_from *1.1.1.1'
    - matchRegex:
        path: data.nginx_conf
        pattern: 'set_real_ip_from *2.2.2.2'

  - it: prevents limit connections above 65536 for default ingress
    template: checks.yaml
    set:
      ingress:
        default:
          extraAnnotations:
            'nginx.ingress.kubernetes.io/limit-connections': '65537'
    asserts:
      - failedTemplate:
          errorMessage: "nginx.ingress.kubernetes.io/limit-connections cannot be greater than 65536"

  - it: allows limit connections above 65536 for default ingress
    template: checks.yaml
    set:
      ingress:
        default:
          extraAnnotations:
            'nginx.ingress.kubernetes.io/limit-connections': '65536'
    asserts:
      - notFailedTemplate:
          errorMessage: "nginx.ingress.kubernetes.io/limit-connections cannot be greater than 65536"

  - it: prevents limit connections above 65536 for enabled exposeDomains ingress
    template: checks.yaml
    set:
      exposeDomains:
        bar:
          hostname: foo.bar
          ingress: baz
      ingress:
        baz:
          extraAnnotations:
            'nginx.ingress.kubernetes.io/limit-connections': '65537'
    asserts:
      - failedTemplate:
          errorMessage: "nginx.ingress.kubernetes.io/limit-connections cannot be greater than 65536"

  - it: uses default TLS secret
    template: ingress.yaml
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: RELEASE-NAME-tls

  - it: uses default TLS secret for exposeDomains
    template: ingress.yaml
    set:
      exposeDomains:
        foo:
          hostname: foo.bar
          ssl:
            enabled: true
    asserts:
      - documentIndex: 0
        equal:
          path: spec.tls[0].secretName
          value: RELEASE-NAME-tls
      - documentIndex: 0
        equal:
          path: spec.tls[0].hosts[0]
          value: release-name.namespace.silta.wdr.io
      - documentIndex: 1
        equal:
          path: spec.tls[0].secretName
          value: RELEASE-NAME-tls-foo
      - documentIndex: 1
        equal:
          path: spec.tls[0].hosts[0]
          value: foo.bar

  - it: uses custom TLS secret when ssl.existingTLSSecret is defined
    template: ingress.yaml
    set:
      ssl:
        existingTLSSecret: my-tls-secret
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: my-tls-secret

  - it: uses custom TLS secret for exposeDomains
    template: ingress.yaml
    set:
      exposeDomains:
        foo:
          hostname: foo.bar
          ssl:
            enabled: true
            existingTLSSecret: my-foo-tls-secret
    asserts:
      - documentIndex: 0
        equal:
          path: spec.tls[0].secretName
          value: RELEASE-NAME-tls
      - documentIndex: 0
        equal:
          path: spec.tls[0].hosts[0]
          value: release-name.namespace.silta.wdr.io
      - documentIndex: 1
        equal:
          path: spec.tls[0].secretName
          value: my-foo-tls-secret
      - documentIndex: 1
        equal:
          path: spec.tls[0].hosts[0]
          value: foo.bar