apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-conf
  labels:
    {{ include "simple.release_labels" . | indent 4 }}
data:
  {{- if .Values.signalsciences.enabled }}
  nginx_signalsciences_conf: |
    load_module /etc/nginx/modules/ngx_http_sigsci_module.so;

  {{- /* NDK module is required only for nginx versions < 1.26. */}}
  {{- $versionParts := split "." .Values.nginx.version }}
  {{- $nginxMajor := $versionParts._0 }}
  {{- $nginxMinor := $versionParts._1 }}
  {{- if or (empty $nginxMajor) (and (eq $nginxMajor "1" ) ( lt $nginxMinor "26" )) }}
    load_module /etc/nginx/modules/ndk_http_module.so;
  {{- end }}
  {{- end }}

  nginx_conf: |

    include modules/*.conf;

    # user                            nginx;
    worker_processes                auto;
    worker_rlimit_nofile            10240;

    error_log                       /proc/self/fd/2 {{ .Values.nginx.loglevel }};

    events {
        worker_connections          10240;
        multi_accept                on;
    }

    http {

        {{- if .Values.signalsciences.enabled }}
        # Signal sciences agent socket
        sigsci_agent_host unix:/sigsci/tmp/sigsci.sock;
        {{- end }}

        # List of upstream proxies we trust to set X-Forwarded-For correctly.
        {{- if kindIs "string" .Values.nginx.realipfrom }}
        set_real_ip_from            {{ .Values.nginx.realipfrom }};
        {{- end }}
        {{- if kindIs "map" .Values.nginx.realipfrom }}
        {{- range .Values.nginx.realipfrom }}
        set_real_ip_from            {{ . }};
        {{- end }}
        {{- end }}

        real_ip_header              {{ .Values.nginx.real_ip_header }};

        include                     /etc/nginx/mime.types;
        default_type                application/octet-stream;

        log_format  main            '$remote_addr - $remote_user [$time_local] "$request" '
                                    '$status $body_bytes_sent "$http_referer" '
                                    '"$http_user_agent" "$http_x_forwarded_for" $host "$http_ja3" "$http_ja4"';


        access_log                  /proc/self/fd/1 main;

        send_timeout                60s;
        sendfile                    on;
        client_body_timeout         60s;
        client_header_timeout       60s;
        client_max_body_size        32m;
        client_body_buffer_size     16k;
        client_header_buffer_size   4k;
        large_client_header_buffers 8 16K;
        keepalive_timeout           75s;
        keepalive_requests          100;
        reset_timedout_connection   off;
        tcp_nodelay                 on;
        tcp_nopush                  on;
        server_tokens               off;

        ## upload_progress             uploads 1m;

        gzip                        on;
        gzip_buffers                16 8k;
        gzip_comp_level             1;
        gzip_http_version           1.1;
        gzip_min_length             20;
        gzip_types                  text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascrip
        gzip_vary                   on;
        gzip_proxied                any;
        gzip_disable                msie6;

        ## https://www.owasp.org/index.php/List_of_useful_HTTP_headers.
        {{- range $header, $value := .Values.nginx.security_headers }}
        {{- if $value }}
        add_header                  {{ $header }} {{ $value }};
        {{- end }}
        {{- end }}
        add_header                  Strict-Transport-Security "max-age=31536000; {{ .Values.nginx.hsts_include_subdomains }} preload" always;
        {{- if .Values.nginx.content_security_policy }}
        add_header                  Content-Security-Policy "{{ .Values.nginx.content_security_policy }}" always;
        {{- end }}

        map_hash_bucket_size        128;

        map $http_host $x_robots_tag_header {
            "~{{ template "simple.domain" $ }}$" "noindex, nofollow, nosnippet, noarchive";
            default  '';
        }
        add_header                  X-Robots-Tag $x_robots_tag_header always;

        map $uri $no_slash_uri {
            ~^/(?<no_slash>.*)$ $no_slash;
        }

        # List health checks that need to return status 200 here
        map $http_user_agent $hc_ua { default 0; 'GoogleHC/1.0' 1; 'kube-probe' 1; }
        {{- if ne .Values.nginx.x_proxy_auth "" }}
        # Verify if x_proxy_auth value is correct
        map $http_x_proxy_auth $proxy_auth { default 0; '{{ .Values.nginx.x_proxy_auth }}' 1; }
        {{- end}}

        include conf.d/*.conf;
    }

  simple_conf: |
    map $http_x_forwarded_proto $fastcgi_https {
        default $https;
        http '';
        https on;
    }

    {{- if .Values.nginx.redirects }}
    # Custom redirects with full url matching
    map '$scheme://$host$request_uri' $redirect_uri {
        {{- range .Values.nginx.redirects }}
        {{- if contains "://" .from }}
        {{ .from | squote }} {{ .to | squote }};
        {{- end }}
        {{- end }}
    }
    # Custom redirects with absolute path matching
    map $request_uri $redirect_uri_local {
        {{- range .Values.nginx.redirects }}
        {{- if not ( contains "://" .from ) }}
        {{ .from | squote }} {{ .to | squote }};
        {{- end }}
        {{- end }}
    }
    {{- end }}


    server {
        server_name simple;
        listen 8080;

        # Loadbalancer health checks need to be fed with http 200
        if ($hc_ua) { return 200; }
        {{- if ne .Values.nginx.x_proxy_auth "" }}
        # Block request if proxy header is set but does not match required value
        if ($proxy_auth = 0) { return 403; }
        {{- end}}

        {{- if .Values.nginx.redirects }}
        # Redirects to specified path if map returns anything
        if ($redirect_uri) {
    	    return 301 $redirect_uri;
        }
        if ($redirect_uri_local) {
    	    return 301 $redirect_uri_local;
        }
        {{- end }}

        root /var/www/html/web;
        index index.html;
        port_in_redirect off;

        include fastcgi.conf;

        # Custom configuration gets included here
        {{- .Values.nginx.serverExtraConfig | nindent 8 -}}

        {{ include "simple.basicauth" . | indent 6}}

        location = /robots.txt {
            access_log off;
        }

        location / {

            # Custom configuration include
            {{ if .Values.nginx.locationExtraConfig }}
            {{ .Values.nginx.locationExtraConfig | nindent 10 }}
            {{- end }}

            ## Most sites won't have configured favicon
            ## and since its always grabbed, turn it off in access log
            ## and turn off it's not-found error in the error log
            location = /favicon.ico { access_log off; log_not_found off;  }

            ## Same for apple-touch-icon files
            location = /apple-touch-icon.png { access_log off; log_not_found off; }
            location = /apple-touch-icon-precomposed.png { access_log off; log_not_found off; }

            ## Rather than just denying .ht* in the config, why not deny
            ## access to all .invisible files
            location ~ /\. { return 404; access_log off; log_not_found off; }
        }
    }

{{- if .Values.nginx.extraConfig }}
  extraConfig: |
  {{ .Values.nginx.extraConfig | nindent 4 }}
{{- end }}
